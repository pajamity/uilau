/* generated by rust_qt_binding_generator */
use libc::{c_char, c_ushort, c_int};
use std::slice;
use std::char::decode_utf16;

use std::sync::Arc;
use std::sync::atomic::{AtomicPtr, Ordering};
use std::ptr::null;

use crate::qt_impl::app_impl::App;

pub enum QString {}

fn set_string_from_utf16(s: &mut String, str: *const c_ushort, len: c_int) {
    let utf16 = unsafe { slice::from_raw_parts(str, to_usize(len)) };
    let characters = decode_utf16(utf16.iter().cloned())
        .map(|r| r.unwrap());
    s.clear();
    s.extend(characters);
}



fn to_usize(n: c_int) -> usize {
    if n < 0 {
        panic!("Cannot cast {} to usize", n);
    }
    n as usize
}


fn to_c_int(n: usize) -> c_int {
    if n > c_int::max_value() as usize {
        panic!("Cannot cast {} to c_int", n);
    }
    n as c_int
}


pub struct AppQObject {}

pub struct AppEmitter {
    qobject: Arc<AtomicPtr<AppQObject>>,
    duration_ms_changed: fn(*mut AppQObject),
    position_ms_changed: fn(*mut AppQObject),
}

unsafe impl Send for AppEmitter {}

impl AppEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> AppEmitter {
        AppEmitter {
            qobject: self.qobject.clone(),
            duration_ms_changed: self.duration_ms_changed,
            position_ms_changed: self.position_ms_changed,
        }
    }
    fn clear(&self) {
        let n: *const AppQObject = null();
        self.qobject.store(n as *mut AppQObject, Ordering::SeqCst);
    }
    pub fn duration_ms_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.duration_ms_changed)(ptr);
        }
    }
    pub fn position_ms_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.position_ms_changed)(ptr);
        }
    }
}

pub trait AppTrait {
    fn new(emit: AppEmitter) -> Self;
    fn emit(&mut self) -> &mut AppEmitter;
    fn duration_ms(&self) -> u64;
    fn position_ms(&self) -> u64;
    fn move_timeline_object(&self, object_id: String, dst_layer_id: u64, dst_time_ms: f32) -> ();
    fn pause(&mut self) -> ();
    fn play(&mut self) -> ();
    fn seek_to(&mut self, to: u64) -> ();
}

#[no_mangle]
pub extern "C" fn app_new(
    app: *mut AppQObject,
    app_duration_ms_changed: fn(*mut AppQObject),
    app_position_ms_changed: fn(*mut AppQObject),
) -> *mut App {
    let app_emit = AppEmitter {
        qobject: Arc::new(AtomicPtr::new(app)),
        duration_ms_changed: app_duration_ms_changed,
        position_ms_changed: app_position_ms_changed,
    };
    let d_app = App::new(app_emit);
    Box::into_raw(Box::new(d_app))
}

#[no_mangle]
pub unsafe extern "C" fn app_free(ptr: *mut App) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn app_duration_ms_get(ptr: *const App) -> u64 {
    (&*ptr).duration_ms()
}

#[no_mangle]
pub unsafe extern "C" fn app_position_ms_get(ptr: *const App) -> u64 {
    (&*ptr).position_ms()
}

#[no_mangle]
pub unsafe extern "C" fn app_move_timeline_object(ptr: *const App, object_id_str: *const c_ushort, object_id_len: c_int, dst_layer_id: u64, dst_time_ms: f32) {
    let mut object_id = String::new();
    set_string_from_utf16(&mut object_id, object_id_str, object_id_len);
    let o = &*ptr;
    o.move_timeline_object(object_id, dst_layer_id, dst_time_ms)
}

#[no_mangle]
pub unsafe extern "C" fn app_pause(ptr: *mut App) {
    let o = &mut *ptr;
    o.pause()
}

#[no_mangle]
pub unsafe extern "C" fn app_play(ptr: *mut App) {
    let o = &mut *ptr;
    o.play()
}

#[no_mangle]
pub unsafe extern "C" fn app_seek_to(ptr: *mut App, to: u64) {
    let o = &mut *ptr;
    o.seek_to(to)
}
